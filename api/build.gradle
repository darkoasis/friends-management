buildscript {
	ext {
		springBootVersion = '1.5.9.RELEASE'
	}
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
		classpath 'org.asciidoctor:asciidoctor-gradle-plugin:1.5.3'
        classpath 'io.github.swagger2markup:swagger2markup-spring-restdocs-ext:1.2.0'
        classpath 'io.github.swagger2markup:swagger2markup-gradle-plugin:1.2.0'
        classpath "org.ajoberstar:gradle-git:1.5.1"
        classpath 'org.asciidoctor:asciidoctorj-pdf:1.5.0-alpha.15'
	}
}

plugins {
    id 'org.springframework.boot' version '1.5.9.RELEASE'
    id 'java'    
    id 'maven-publish'
    id 'checkstyle'
    id 'findbugs'
    id 'jdepend'
    id 'pmd'

}

// for document
apply plugin: 'org.asciidoctor.convert'
apply plugin: 'io.github.swagger2markup'

repositories {
	//  For local testing
    mavenLocal()
    //mavenCentral()
    //jcenter()
    //maven {
    //    url "https://nexus.dev.aws.singtel.com/repository/maven-public/"
    //}
}

// proeject settings
sourceCompatibility = 1.8
targetCompatibility = 1.8

group = 'sg.com.spgroup.friendsmgmt'
if (version_suffix?.trim()) {
    version = "${version_major}.${version_minor}.${version_patch}-${version_suffix}"
} else {
    version = "${version_major}.${version_minor}.${version_patch}"
}

project.ext {
    springVersion    = '4.3.8.RELEASE'
    hibernateVersion = '5.2.10.Final'
}

configurations.all
{
    resolutionStrategy
    {
        eachDependency { DependencyResolveDetails details ->        
            if ( details.requested.group == 'org.hibernate' ) {
                if ( details.requested.name == 'hibernate-validator' ) {
                    details.useVersion "5.4.1.Final"
                } else {
                    details.useVersion "${hibernateVersion}"
                }
            } else if ( details.requested.group == 'org.springframework') {
                details.useVersion "${springVersion}"
            }
        }
    }
}

dependencies {
    compile group: "sg.com.spgroup.friendsmgmt", name: "friends-management-pd", version:"${friends_management_pd_release}", changing:true
    //compile group: "sg.com.spgroup.friendsmgmt", name: "friends-management-si", version:"${projectname_si_release}", changing:true

    compile 'org.springframework.boot:spring-boot-starter-data-jpa'
    compile 'org.springframework.boot:spring-boot-starter'
    compile 'org.springframework.boot:spring-boot-starter-web'
    //compile 'org.springframework.boot:spring-boot-starter-security'

	compile 'io.swagger:swagger-annotations:1.5.6'
	compile 'commons-lang:commons-lang:2.3'
	compile 'commons-lang:commons-lang:2.3'
	compile 'org.apache.commons:commons-lang3:3.0'
	compile 'javax.interceptor:javax.interceptor-api:1.+'
	
	runtime 'org.postgresql:postgresql:42.1.4'
	
	//Logs
	compile 'com.amazonaws:aws-java-sdk-logs:1.11.160'
	
    testCompile 'org.springframework.boot:spring-boot-starter-test'
    testCompile 'io.springfox:springfox-swagger2:2.7.0' 
    testCompile 'io.springfox:springfox-bean-validators:2.7.0'   
    testCompile 'org.springframework.restdocs:spring-restdocs-mockmvc'  

    testCompile "org.springframework:spring-test:4.3.8.RELEASE"
    testCompile 'org.mockito:mockito-core:2.8.47'

    testCompile 'org.dbunit:dbunit:2.5.3'
    testCompile 'com.github.springtestdbunit:spring-test-dbunit:1.3.0'
    
    testRuntime 'org.slf4j:log4j-over-slf4j:1.7.25'
    testRuntime 'org.slf4j:jul-to-slf4j:1.7.25'
    testRuntime 'ch.qos.logback:logback-classic:1.2.3'  
    
    testRuntime 'com.h2database:h2:1.4.196'          
    testRuntime 'org.postgresql:postgresql:42.1.4'

    // json matcher
    testCompile group: 'org.hamcrest', name: 'java-hamcrest', version: '2.0.0.0'
}

springBoot {
    executable = true
}


ext {
	htmlDocOutputDir = file("${buildDir}/docs/")
    asciiDocOutputDir = file("${buildDir}/docs/asciidoc/generated")
    swaggerOutputDir = file("${buildDir}/docs/swagger")
    snippetsOutputDir = file("${buildDir}/docs/asciidoc/snippets")
}

test {
    systemProperty 'io.springfox.staticdocs.outputDir', swaggerOutputDir
    systemProperty 'io.springfox.staticdocs.snippetsOutputDir', snippetsOutputDir
    systemProperty 'sg.com.spgroup.friendsmgmt.api.version', version
}

convertSwagger2markup {
    dependsOn test
    swaggerInput "${swaggerOutputDir}/swagger.json"
    outputDir asciiDocOutputDir
    config = [
            'swagger2markup.pathsGroupedBy' : 'TAGS',
            'swagger2markup.extensions.springRestDocs.snippetBaseUri': snippetsOutputDir.getAbsolutePath()]
}

asciidoctor {
    dependsOn convertSwagger2markup
    //sourceDir asciiDocOutputDir
    sources {
         include "index.adoc"
    }
    // to generate both html and pdf
    backends = ['html5', 'pdf']
    outputDir = htmlDocOutputDir
    attributes = [
            doctype: 'book',
            toc: 'left',
            toclevels: '3',
            numbered: '',
            sectlinks: '',
            sectanchors: '',
            hardbreaks: '',
            generated: asciiDocOutputDir
    ]
}

task sourceJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}

artifacts {
    archives javadocJar, sourceJar
}

checkstyle {
    toolVersion = "7.8"
    sourceSets  = [sourceSets.main]
}

findbugs {
    sourceSets = [sourceSets.main]
    excludeFilter = file("$rootProject.projectDir/config/findbugs/excludeFilter.xml")
}

tasks.withType(FindBugs) {
    reports {
        xml.enabled false
        html.enabled true
    }
}

jdepend {
   toolVersion = "2.9.1"
   sourceSets = [sourceSets.main]
   ignoreFailures = true
}

jdependMain {
   reports {
      xml.enabled true
      text.enabled false
   }
}

task jdependReport(dependsOn: jdependMain, group: 'verification', description: 'Generates a HTML report after executing jdepend checks.') {
    doLast {
	    ant.xslt(
	        in: "$reporting.baseDir/jdepend/main.xml",
	        style: "$rootDir/config/jdepend/report.xslt",
	        out:"$reporting.baseDir/jdepend/main.html")
    }
}

check {
   dependsOn += ['jdependReport']
}


pmd {
   toolVersion = "5.7.0"
   sourceSets = [sourceSets.main]
   ignoreFailures = true
   ruleSets = []
   ruleSetFiles = files("$rootDir/config/pmd/rulesets.xml")
}

pmdMain {
   reports {
      xml.enabled true
      html.enabled false
   }
}

task pmdReport(dependsOn: pmdMain, group: 'verification', description: 'Generates a HTML report after executing PMD checks.') {
	doLast {
		ant.xslt(
			in: "$reporting.baseDir/pmd/main.xml",
			style: "$rootDir/config/pmd/report.xslt",
			out:"$reporting.baseDir/pmd/main.html" )
	}
}

check {
   dependsOn += ['pmdReport']
}

/*
 * If you need to publish, ensure these variables are set in your 
 * ~/.gradle/gradle.properties file:
 *
 *      singtel_digital_username
 *      singtel_digital_password
 */
publishing {
    publications {
        mavenJava(MavenPublication) {
        	groupId 'sg.com.spgroup.friendsmgmt'
            
          from components.java
            
    			artifact sourceJar {
                classifier "sources"
            }
		    	artifact javadocJar {
                classifier "javadoc"
            }
        }
    }    
    repositories {
    	/*
        maven {
            url "https://nexus.dev.aws.singtel.com/repository/maven-snapshots/"
            
            // Define if provided - only the publish tasks needs credentials.
      		if ( project.hasProperty( 'singtel_digital_username' ) ) {
	              credentials {
	                username singtel_digital_username
	                password singtel_digital_password
            		}	 
        		}
    		}
    	*/
    	mavenCentral()
  	}
}