buildscript {
    ext {
        springBootVersion = '1.5.9.RELEASE'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

plugins {
    id 'org.springframework.boot' version '1.5.9.RELEASE'
    id 'java'
    id 'eclipse'
    id 'maven-publish'

    // add git info to jar
    id 'com.github.ksoichiro.build.info' version '0.2.0'
    
    id 'checkstyle'
    id 'findbugs'
    id 'jdepend'
    id 'pmd'
    id 'com.github.ben-manes.versions' version '0.14.0'
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'

sourceCompatibility = 1.8
targetCompatibility = 1.8

group = 'sg.com.spgroup.friendsmgmt'
if (version_suffix?.trim()) {
    version = "${version_major}.${version_minor}.${version_patch}-${version_suffix}"
} else {
    version = "${version_major}.${version_minor}.${version_patch}"
}

repositories {
    //Use only for DEV
    mavenLocal()
    
    mavenCentral()
    jcenter()
}

project.ext {
    springVersion    = '4.3.8.RELEASE'
    hibernateVersion = '5.2.10.Final'
}

configurations.all
{
    resolutionStrategy
    {
        eachDependency { DependencyResolveDetails details ->        
            if ( details.requested.group == 'org.hibernate' ) {
                if ( details.requested.name == 'hibernate-validator' ) {
                    details.useVersion "5.4.1.Final"
                } else {
                    details.useVersion "${hibernateVersion}"
                }
            } else if ( details.requested.group == 'org.springframework') {
                details.useVersion "${springVersion}"
            }
        }
    }
}


dependencies {
    compile 'org.springframework.boot:spring-boot-starter'
    compile 'org.hibernate:hibernate-validator'
    compile 'org.springframework.boot:spring-boot-starter-data-jpa'
    compile 'commons-lang:commons-lang:2.3'

    compile 'org.springframework.data:spring-data-envers:1.1.3.RELEASE' 
    compile "com.fasterxml.jackson.core:jackson-annotations:2.8.8" 
    
    compile "org.hibernate:hibernate-ehcache:${hibernateVersion}"
	
	//credential stash
    //compile 'com.jessecoyle:jcredstash:1.3'
    // aws
    compile 'com.amazonaws:aws-java-sdk-kms:1.11.156'
    compile 'com.amazonaws:aws-java-sdk-dynamodb:1.11.128'
    compile 'commons-validator:commons-validator:1.6'
    
    testCompile 'org.springframework.boot:spring-boot-starter-test'

    // validator implement
    testCompile 'javax.el:javax.el-api:3.0.0'
    testCompile 'org.glassfish.web:el-impl:2.2.1-b05'
    
    testCompile "org.springframework:spring-test:4.3.8.RELEASE"
    testCompile 'org.dbunit:dbunit:2.5.3'
    testCompile 'com.github.springtestdbunit:spring-test-dbunit:1.3.0'
    testCompile 'org.mockito:mockito-core:2.8.47'
    
    testRuntime 'org.slf4j:log4j-over-slf4j:1.7.25'
    testRuntime 'org.slf4j:jul-to-slf4j:1.7.25'
    testRuntime 'ch.qos.logback:logback-classic:1.2.3'  

    testRuntime 'com.h2database:h2:1.4.196'          
    testRuntime 'org.postgresql:postgresql:42.1.4'
    testRuntime 'p6spy:p6spy:3.0.0' 
    
    testRuntime 'com.fasterxml.jackson.dataformat:jackson-dataformat-csv:2.8.8'
}

bootRepackage {
    enabled = false
}

task sourceJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}
task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}
artifacts {
    archives javadocJar, sourceJar
}

checkstyle {
    toolVersion = "7.8"
    sourceSets  = [sourceSets.main]
}

findbugs {
    sourceSets = [sourceSets.main]
    excludeFilter = file("$rootProject.projectDir/config/findbugs/excludeFilter.xml")
}
tasks.withType(FindBugs) {
    reports {
        xml.enabled false
        html.enabled true
    }
}

jdepend {
    toolVersion = "2.9.1"
    sourceSets = [sourceSets.main]
    ignoreFailures = true
}
jdependMain {
    reports {
       xml.enabled true
       text.enabled false
    }
}
task jdependReport(dependsOn: jdependMain, group: 'verification', description: 'Generates a HTML report after executing jdepend checks.') {
    doLast {
        ant.xslt(
            in: "$reporting.baseDir/jdepend/main.xml",
            style: "$rootDir/config/jdepend/report.xslt",
            out:"$reporting.baseDir/jdepend/main.html")
    }
}

check {
    dependsOn += ['jdependReport']
}


pmd {
    toolVersion = "5.7.0"
    sourceSets = [sourceSets.main]
    ignoreFailures = true
    ruleSets = []
    ruleSetFiles = files("$rootDir/config/pmd/rulesets.xml")
}

pmdMain {
    reports {
       xml.enabled true
       html.enabled false
    }
}

task pmdReport(dependsOn: pmdMain, group: 'verification', description: 'Generates a HTML report after executing PMD checks.') {
    doLast {
        ant.xslt(
            in: "$reporting.baseDir/pmd/main.xml",
            style: "$rootDir/config/pmd/report.xslt",
            out:"$reporting.baseDir/pmd/main.html" )
    }
}

check {
    dependsOn += ['pmdReport']
}

/*
 * If you need to publish, ensure these variables are set in your 
 * ~/.gradle/gradle.properties file:
 *
 *      singtel_digital_username
 *      singtel_digital_password
 */
publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId 'sg.com.spgroup.friendsmgmt'
            
            from components.java
            
            artifact sourceJar {
                classifier "sources"
            }
            artifact javadocJar {
                classifier "javadoc"
            }
            
            if ( project.hasProperty( 'build_number' ) ) {
                pom.withXml {
                    asNode().appendNode( 'description', "Build ${build_number}" )
                }
            }
        }
    }
    repositories {
    }
}
